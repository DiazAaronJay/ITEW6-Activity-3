{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ProductList = _resolveComponent(\"ProductList\");\n  const _component_Cart = _resolveComponent(\"Cart\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_ProductList, {\n    products: $data.products,\n    addToCart: $options.addToCart\n  }, null, 8 /* PROPS */, [\"products\", \"addToCart\"]), _createVNode(_component_Cart, {\n    cart: $data.cart,\n    removeFromCart: $options.removeFromCart,\n    updateQuantity: $options.updateQuantity\n  }, null, 8 /* PROPS */, [\"cart\", \"removeFromCart\", \"updateQuantity\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_ProductList","products","$data","addToCart","$options","_component_Cart","cart","removeFromCart","updateQuantity"],"sources":["C:\\Users\\aaron\\Desktop\\mytemplate\\src\\App.vue"],"sourcesContent":["<template>\n  <div>\n    <ProductList :products=\"products\" :addToCart=\"addToCart\" />\n    <Cart :cart=\"cart\" :removeFromCart=\"removeFromCart\" :updateQuantity=\"updateQuantity\" />\n  </div>\n</template>\n\n<script>\nimport ProductList from './components/ProductList.vue';\nimport Cart from './components/Cart.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    ProductList,\n    Cart\n  },\n  data() {\n    return {\n      products: [\n        { name: 'Product 1', price: 10 },\n        { name: 'Product 2', price: 15 },\n        { name: 'Product 3', price: 20 }\n      ],\n      cart: []\n    }\n  },\n  methods: {\n    addToCart(product) {\n      const index = this.cart.findIndex(item => item.name === product.name);\n      if (index !== -1) {\n        this.cart[index].quantity++;\n      } else {\n        this.cart.push({ ...product, quantity: 1 });\n      }\n    },\n    removeFromCart(index) {\n      this.cart.splice(index, 1);\n    },\n    updateQuantity(index, newQuantity) {\n      if (newQuantity < 1) {\n        newQuantity = 1;\n      }\n      this.cart[index].quantity = parseInt(newQuantity);\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":";;;;uBACEA,mBAAA,CAGM,cAFJC,YAAA,CAA2DC,sBAAA;IAA7CC,QAAQ,EAAEC,KAAA,CAAAD,QAAQ;IAAGE,SAAS,EAAEC,QAAA,CAAAD;sDAC9CJ,YAAA,CAAuFM,eAAA;IAAhFC,IAAI,EAAEJ,KAAA,CAAAI,IAAI;IAAGC,cAAc,EAAEH,QAAA,CAAAG,cAAc;IAAGC,cAAc,EAAEJ,QAAA,CAAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}